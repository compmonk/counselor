const mongoose = require("mongoose");


const assignmentSchema = mongoose.Schema({
    "id": mongoose.Schema.Types.Number,
    "courseId":mongoose.Schema.Types.Number,
    "userId": mongoose.Schema.Types.ObjectId,
    "keywords": mongoose.Schema.Types.Mixed,
    "description": mongoose.Schema.Types.String,
    "due_at": mongoose.Schema.Types.String,
    "unlock_at": mongoose.Schema.Types.Mixed,
    "lock_at": mongoose.Schema.Types.Mixed,
    "points_possible": mongoose.Schema.Types.Number,
    "grading_type": mongoose.Schema.Types.String,
    "assignment_group_id": mongoose.Schema.Types.Number,
    "grading_standard_id": mongoose.Schema.Types.Mixed,
    "created_at":  mongoose.Schema.Types.String,
    "updated_at":  mongoose.Schema.Types.String,
    "peer_reviews": mongoose.Schema.Types.Boolean,
    "automatic_peer_reviews": mongoose.Schema.Types.Boolean,
    "position": mongoose.Schema.Types.Number,
    "grade_group_students_individually": mongoose.Schema.Types.Boolean,
    "anonymous_peer_reviews": mongoose.Schema.Types.Boolean,
    "group_category_id": mongoose.Schema.Types.Number,
    "post_to_sis": mongoose.Schema.Types.Boolean,
    "moderated_grading": mongoose.Schema.Types.Boolean,
    "omit_from_final_grade": mongoose.Schema.Types.Boolean,
    "intra_group_peer_reviews": mongoose.Schema.Types.Boolean,
    "anonymous_instructor_annotations": mongoose.Schema.Types.Boolean,
    "anonymous_grading": mongoose.Schema.Types.Boolean,
    "graders_anonymous_to_graders": mongoose.Schema.Types.Boolean,
    "grader_count": mongoose.Schema.Types.Number,
    "grader_comments_visible_to_graders": mongoose.Schema.Types.Boolean,
    "final_grader_id": mongoose.Schema.Types.Mixed,
    "grader_names_visible_to_final_grader": mongoose.Schema.Types.Mixed,
    "allowed_attempts": mongoose.Schema.Types.Mixed,
    "secure_params": mongoose.Schema.Types.String,
    "course_id": mongoose.Schema.Types.Number,
    "name": mongoose.Schema.Types.String,
    "submission_types": mongoose.Schema.Types.Mixed,
    "has_submitted_submissions": mongoose.Schema.Types.Mixed,
    "due_date_required": mongoose.Schema.Types.Mixed,
    "max_name_length": mongoose.Schema.Types.Number,
    "in_closed_grading_period": mongoose.Schema.Types.Mixed,
    "is_quiz_assignment": mongoose.Schema.Types.Mixed,
    "can_duplicate": mongoose.Schema.Types.Mixed,
    "original_course_id": mongoose.Schema.Types.Mixed,
    "original_assignment_id": mongoose.Schema.Types.Mixed,
    "original_assignment_name": mongoose.Schema.Types.Mixed,
    "original_quiz_id": mongoose.Schema.Types.Mixed,
    "workflow_state": mongoose.Schema.Types.String,
    "muted": mongoose.Schema.Types.Boolean,
    "html_url": mongoose.Schema.Types.String,
    "allowed_extensions":mongoose.Schema.Types.Mixed,
    "published": mongoose.Schema.Types.Boolean,
    "only_visible_to_overrides": mongoose.Schema.Types.Mixed,
    "locked_for_user": mongoose.Schema.Types.Mixed,
    "submissions_download_url": mongoose.Schema.Types.String,
    "post_manually": mongoose.Schema.Types.Mixed,
    "anonymize_students": mongoose.Schema.Types.Mixed,
    "require_lockdown_browser": mongoose.Schema.Types.Mixed

});

module.exports = mongoose.model("assignments", assignmentSchema);